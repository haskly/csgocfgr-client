@charset 'UTF-8';

//      _______  ____  _  __________   _____  ______
//     / __/ _ \/ __ \/ |/ /_  __/ /  /  _/ |/ / __/
//    / _// , _/ /_/ /    / / / / /___/ //    / _/
//   /_/ /_/|_|\____/_/|_/ /_/ /____/___/_/|_/___/   v3.2.1
//
//   This project is licensed under the terms of the MIT license


//------------------------------------------------------------------------//
// Global vars
//------------------------------------------------------------------------//

/// Flag for debug mode
$fs-debug-mode: false !default;

/// Base font size
$fs-base-font-size: 16px !default;

/// @ignore Use maps instead of variables below https://www.viget.com/articles/sass-with-maps

/// Named breakpoints map
$fs-breakpoints: (
  'global': (
    'narrow' : 320px,
    'small'  : 480px,
    'medium' : 640px,
    'wide'   : 960px,
    'full'   : 1200px
  )
) !default;

/// Colors map
/// @link http://clrs.cc
$fs-colors: (
  'base': (
    'blue'   : #0074d9,
    'teal'   : #39cccc,
    'green'  : #2ecc40,
    'lime'   : #01ff70,
    'yellow' : #ffdc00,
    'orange' : #ff851b,
    'red'    : #ff4136,
    'purple' : #b10dc9,
    'black'  : #111,
    'gray'   : #aaa
  ),
  'text': (
    'black': #333
  ),
) !default;

/// Z-index layer map
$fs-zindex: (
  'main' : 100,
  'menu' : 200,
  'nav'  : 300,
  'top'  : 999
) !default;

/// SVG icon map for use with `fs-svg` function
$fs-svg-icons: (
  close: (
    height: 28,
    width: 22,
    data: '<path d="M20.28 20.66q0 .62-.44 1.06l-2.12 2.12q-.44.44-1.06.44t-1.07-.44l-4.6-4.6-4.6 4.6q-.43.44-1.06.44t-1.06-.44l-2.12-2.12q-.44-.44-.44-1.06t.44-1.07l4.6-4.6-4.6-4.6q-.44-.43-.44-1.06t.44-1.06l2.12-2.12q.44-.44 1.06-.44t1.07.44l4.6 4.6 4.6-4.6q.43-.44 1.06-.44t1.06.44l2.12 2.12q.44.44.44 1.06t-.44 1.07l-4.6 4.6 4.6 4.6q.44.43.44 1.06z"/>'
  ),
  search: (
    height: 28,
    width: 26,
    data: '<path d="M18 13q0-2.9-2.06-4.95T11 6 6.05 8.06 4 13t2.05 4.95T11 20t4.95-2.06T18 13zm8 13q0 .8-.6 1.4T24 28q-.84 0-1.4-.6l-5.37-5.34Q14.43 24 11 24q-2.23 0-4.27-.87T3.2 20.8.88 17.26 0 13t.87-4.27T3.2 5.2t3.53-2.33T11 2t4.27.87T18.8 5.2t2.33 3.53T22 13q0 3.44-1.94 6.23l5.36 5.36q.58.57.58 1.4z"/>'
  )
) !default;

//------------------------------------------------------------------------//
// Functions
//------------------------------------------------------------------------//
/// Check whether `$list` contains `$value`.
/// @group Internals
/// @param  {List} $list  - List of values.
/// @param  {*}    $value - Value to check in the list.
/// @return {Bool}
/// @link http://www.sitepoint.com/bulletproof-function-validate-length-values-sass/
///
@function fs-contains($list, $value) {
  @return not not index($list, $value);
}

/// Convert unit to px, em, rem, or %
/// @group Internals
/// @param {Number} $units- Units to convert to
/// @param {Number} $value - Starting px value
/// @return {Number} $context - Context font-size in px
///
@function _convert-units($units, $value, $context) {
  @if unit($value) != 'px' or unit($context) != 'px' {
    @error 'üî¥  _convert-units() only accepts pixel values';
  }

  // Percentage
  @if $units == '%' {
    @if unit($value) == '%' {
      @return $value;
    }
    @else {
      @return percentage($value / $context);
    }
  }

  // Pixels
  @else if $units == 'px' {
    @return $value;
  }

  // Ems
  @else if $units == 'em' {
    @return fs-em($value, $context);
  }

  // Rems
  @else if $units == 'rem' {
    @return fs-rem($value);
  }

  // Unsupported output unit
  @else {
    @error 'üî¥  ‚Äú#{$units}‚Äù is not a valid output unit for _convert-units()';
  }
};

/// Custom easings map
/// @link https://github.com/jhardy/compass-ceaser-easing
/// @link http://easings.net/
///
$fs-easings: (
  'linear'         : '0.250, 0.250, 0.750, 0.750',
  'ease'           : '0.250, 0.100, 0.250, 1.000',
  'ease-in'        : '0.420, 0.000, 1.000, 1.000',
  'ease-out'       : '0.000, 0.000, 0.580, 1.000',
  'ease-in-out'    : '0.420, 0.000, 0.580, 1.000',
  'easeInQuad'     : '0.550, 0.085, 0.680, 0.530',
  'easeInCubic'    : '0.550, 0.055, 0.675, 0.190',
  'easeInQuart'    : '0.895, 0.030, 0.685, 0.220',
  'easeInQuint'    : '0.755, 0.050, 0.855, 0.060',
  'easeInSine'     : '0.470, 0.000, 0.745, 0.715',
  'easeInExpo'     : '0.950, 0.050, 0.795, 0.035',
  'easeInCirc'     : '0.600, 0.040, 0.980, 0.335',
  'easeInBack'     : '0.600, -0.280, 0.735, 0.045',
  'easeOutQuad'    : '0.250, 0.460, 0.450, 0.940',
  'easeOutCubic'   : '0.215, 0.610, 0.355, 1.000',
  'easeOutQuart'   : '0.165, 0.840, 0.440, 1.000',
  'easeOutQuint'   : '0.230, 1.000, 0.320, 1.000',
  'easeOutSine'    : '0.390, 0.575, 0.565, 1.000',
  'easeOutExpo'    : '0.190, 1.000, 0.220, 1.000',
  'easeOutCirc'    : '0.075, 0.820, 0.165, 1.000',
  'easeOutBack'    : '0.175, 0.885, 0.320, 1.275',
  'easeInOutQuad'  : '0.455, 0.030, 0.515, 0.955',
  'easeInOutCubic' : '0.645, 0.045, 0.355, 1.000',
  'easeInOutQuart' : '0.770, 0.000, 0.175, 1.000',
  'easeInOutQuint' : '0.860, 0.000, 0.070, 1.000',
  'easeInOutSine'  : '0.445, 0.050, 0.550, 0.950',
  'easeInOutExpo'  : '1.000, 0.000, 0.000, 1.000',
  'easeInOutCirc'  : '0.785, 0.135, 0.150, 0.860',
  'easeInOutBack'  : '0.680, -0.550, 0.265, 1.55'
);


/// Custom easing function
/// @param {String} $name - Name of easing
/// @return {String} - Easing code
/// @require {variable} $fs-easings - Custom easing map
///
@function fs-easing($name) {
  @return cubic-bezier(unquote(map-get($fs-easings, $name)));
}

/// Convert px to em
/// @param {Number | Map} $values - Value or values to convert
/// @param {Number} $context [$fs-base-font-size] - Base font size
/// @return {*} - Converted value or list of values
/// @require {variable} $fs-base-font-size - Base font size
///
@function fs-em($values, $context: $fs-base-font-size) {

  // Ensure context size is in pixels
  @if unit($context) != 'px' {
    @error 'üî¥  #{$context} size must be in pixels';
  }

  // Placeholder list for converted values
  $output: ();

  @each $val in $values {
    // Check if pixel value
    @if type-of($val) == 'number' and unit($val) == 'px' {
      // Convert to ems
      $val: ($val / $context) * 1em;
    }

    // Do nothing to all other values
    @else if $fs-debug-mode {
      @warn 'üî∂  Can‚Äôt convert non-pixel value to ems: #{$val}';
    }

    // Append value to output list
    $output: append($output, $val);
  }

  // Return converted value(s)
  @return $output;
}

////
/// @group Internals
/// @author Hugo Giraudel
/// @link http://www.sitepoint.com/extra-map-functions-sass/
////

/// Fetch nested keys
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to fetch
/// @return {*}
@function fs-map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

/// Update a key deeply nested
/// @author Hugo Giraudel
/// @param {Map} $map - Map to update
/// @param {Arglist} $keys - Keys to access to value to update
/// @param {*} $value - New value (last member of `$keys`)
/// @return {Map} - Updated map
@function fs-map-deep-set($map, $keys.../*, $value */) {
  $map-list: ($map,);
  $result: null;

  @if length($keys) == 2 {
    @return map-merge($map, (nth($keys, 1): nth($keys, -1)));
  }

  @for $i from 1 through length($keys) - 2 {
    $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
  }

  @for $i from length($map-list) through 1 {
    $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
  }

  @return $result;
}

/// Compute the maximum depth of a map
/// @param {Map} $map
/// @return {Number} max depth of `$map`
@function fs-map-depth($map) {
  $level: 1;

  @each $key, $value in $map {
    @if type-of($value) == 'map' {
      $level: max(fs-map-depth($value) + 1, $level);
    }
  }

  @return $level;
}

/// Test if map got all `$keys` at first level
/// @author Hugo Giraudel
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to test
/// @return {Bool}
@function fs-map-has-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
  }

  @return true;
}

/// Test if map got all `$keys` nested with each others
/// @author Hugo Giraudel
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to test
/// @return {Bool}
@function fs-map-has-nested-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  }

  @return true;
}

/// An equivalent of `zip` function but for maps.
/// Takes two lists, the first for keys, second for values.
/// @param {List} $keys - Keys for map
/// @param {List} $values - Values for map
/// @return {Map} Freshly created map
/// @link http://sass-lang.com/documentation/Sass/Script/Functions.html#zip-instance_method
@function fs-map-zip($keys, $values) {
  $l-keys: length($keys);
  $l-values: length($values);
  $min: min($l-keys, $l-values);
  $map: ();

  @if $l-keys != $l-values {
    @warn 'There are #{$l-keys} key(s) for #{$l-values} value(s) in the map for `map-zip`. ' + 'Resulting map will only have #{$min} pairs.';
  }

  @if $min == 0 {
    @return $map;
  }

  @for $i from 1 through $min {
    $map: map-merge($map, (nth($keys, $i): nth($values, $i)));
  }

  @return $map;
}

/// jQuery-style extend function
/// About `map-merge()`:
/// * only takes 2 arguments
/// * is not recursive
/// @param {Map} $map - first map
/// @param {ArgList} $maps - other maps
/// @param {Bool} $deep - recursive mode
/// @return {Map}
@function fs-map-extend($map, $maps.../*, $deep */) {
  $last: nth($maps, -1);
  $deep: $last == true;
  $max: if($deep, length($maps) - 1, length($maps));

  // Loop through all maps in $maps...
  @for $i from 1 through $max {
    // Store current map
    $current: nth($maps, $i);

    // If not in deep mode, simply merge current map with map
    @if not $deep {
      $map: map-merge($map, $current);
    } @else {
      // If in deep mode, loop through all tuples in current map
      @each $key, $value in $current {

        // If value is a nested map and same key from map is a nested map as well
        @if type-of($value) == 'map' and type-of(map-get($map, $key)) == 'map' {
          // Recursive extend
          $value: fs-map-extend(map-get($map, $key), $value, true);
        }

        // Merge current tuple with map
        $map: map-merge($map, ($key: $value));
      }
    }
  }

  @return $map;
}

/// Convert px to rem
/// @param {Number | Map} $values - Value values to convert
/// @param {Number} $context [$fs-base-font-size] - Base font size
/// @return {*} - Converted value or list of values
/// @require {variable} $fs-base-font-size - Base font size
///
@function fs-rem($values) {

  // Placeholder list for converted values
  $output: ();

  @each $val in $values {

    // Check if pixel value
    @if type-of($val) == 'number' and unit($val) == 'px' {
      // Convert to rems
      $val: ($val / $fs-base-font-size) * 1rem;
    }

    // Do nothing to all other values
    @else if $fs-debug-mode and $val != 0 {
      @warn 'üî∂  Can‚Äôt convert non-pixel value to rems: #{$val}';
    }

    // Append value to output list
    $output: append($output, $val);
  }

  // Return converted value(s)
  @return $output;
}

/// Slices `$list` between `$start` and `$end`.
/// @group Internals
/// @author Hugo Giraudel
/// @link http://sassylists.com/documentation.html#fs-slice
///
/// @param {List}   $list                  - list to slice
/// @param {Number} $start (1)             - start index
/// @param {Number} $end   (length($list)) - end index
///
/// @return {List | Null}
///
/// @throws List indexes $start and $end must be numbers for `fs-slice`.
/// @throws Start index has to be lesser than or equals to the end index for `fs-slice`.
/// @throws List indexes must be non-zero integers for `fs-slice`.
/// @throws Start index has to be lesser than or equal to list length for `fs-slice`.
/// @throws End index has to be lesser than or equal to list length for `fs-slice`.
///
/// @example
/// fs-slice(a b c d e, 2, 4)
/// // b c d
///
/// @example
/// fs-slice(a b c d e, 2, 2)
/// // b
///
/// @example
/// fs-slice(a b c d e, 4, 2)
/// // null
///
/// @example
/// fs-slice(a b c d e, -1, 6)
/// // null
///
@function fs-slice($list, $start: 1, $end: length($list)) {
  @if type-of($start) != 'number' or type-of($end) != 'number' {
    @warn 'List indexes #{$start} and #{$end} must be numbers for `fs-slice`.';
    @return null;
  }

  @if $start > $end {
    @warn 'Start index is #{$start} but has to be lesser than or equals to the end index (#{$end}) for `fs-slice`.';
    @return null;
  }

  @if $start < 1 or $end < 1 {
    @warn 'List indexes must be non-zero integers for `fs-slice`.';
    @return null;
  }

  @if $start > length($list) {
    @warn 'Start index is #{$start} but list is only #{length($list)} items long for `fs-slice`.';
    @return null;
  }

  @if $end > length($list) {
    @warn 'End index is #{$end} but list is only #{length($list)} items long for `fs-slice`.';
    @return null;
  }

  $result: ();

  @for $i from $start through $end {
    $result: append($result, nth($list, $i), list-separator($list));
  }

  @return $result;
}

/// Replace `$search` with `$replace` in `$string`
/// @group Internals
/// @author Hugo Giraudel
///
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
///
/// @return {String} - Updated string
///
/// @link http://sassmeister.com/gist/1b4f2da5527830088e4d
/// @link http://hugogiraudel.com/2014/01/13/sass-string-replacement-function/
///
/// @example scss
///   fs-str-replace("abcde", "bc", "a") => "aade"
///
@function fs-str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + fs-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

/// Add `$unit` to `$value`
/// @group Internals
/// @author Hugo Giraudel
/// @link http://hugogiraudel.com/2014/01/15/sass-string-to-number/
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
/// @return {Number} - `$value` expressed in `$unit`
@function fs-to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }

  @return $value * map-get($units, $unit);
}


/// Casts a string into a number
/// @group Internals
/// @param {String | Number} $value - Value to be parsed
/// @return {Number}
/// @author Hugo Giraudel
/// @link http://hugogiraudel.com/2014/01/15/sass-string-to-number/
@function fs-to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);;
}

/// Strip units
/// @group Internals
/// @param {Number} $arg - Value to strip
/// @return {Number} - Stripped value
/// @link http://stackoverflow.com/a/12335841/673457
///
@function fs-strip($arg) {
  // Return unitless value if valid number
  @if type-of($arg) == 'number' {
    @return $arg / ($arg * 0 + 1);
  }
  // Error if not a valid number
  @else {
    @error 'üî¥  fs-strip(#{inspect($arg)} is not a valid number';
  }
}


// Functions with dependencies
/// Helper to get named breakpoint value from `$fs-breakpoints` map. Defaults to using 'base' as key if a single argument is passed.
/// @param {Arglist} $keys - key/value
/// @return {Number} - Breakpoint width
/// @require {function} fs-map-deep-get - Fetch nested keys
/// @require {variable} $fs-breakpoints - Named breakpoints map
///
@function fs-breakpoint($keys...) {
  @if not global-variable-exists(fs-breakpoints) {
    @error 'üî¥  $fs-breakpoints map does not exist';
  }

  @if not length($fs-breakpoints) {
    @error 'üî¥  $fs-breakpoints map does not contain any items';
  }

  $default-key: 'global';

  // If a single value was passed, use the default key
  @if length($keys) == 1 and type-of(map-get($fs-breakpoints, $default-key)) != 'null' {
    $keys: join($default-key, $keys, comma);
  }

  $val: fs-map-deep-get($fs-breakpoints, $keys...);

  // Validate value
  @if type-of($val) != 'null' {
    @return $val;
  }
  @else {
    @error 'üî¥  ‚Äú#{$keys}‚Äù breakpoint not found';
  }
}
// Requires "map-functions"
/// Helper to get color value from `$fs-colors` map
/// @param {Arglist} $keys - key/value
/// @return {Color} - Color value
/// @require {function} fs-map-deep-get - Fetch nested keys
/// @require {variable} $fs-colors - Named colors map
///
@function fs-color($keys...) {
  @if not global-variable-exists(fs-colors) {
    @error 'üî¥  $fs-colors map does not exist';
  }

  @if not length($fs-colors) {
    @error 'üî¥  Color map does not contain any items';
  }

  $default-key: 'base';

  // If a single value was passed, use the default key
  @if length($keys) == 1 and type-of(map-get($fs-colors, $default-key)) != 'null' {
    $keys: join($default-key, $keys, comma);
  }

  $val: fs-map-deep-get($fs-colors, $keys...);

  // Validate
  @if type-of($val) != 'color' {
    @error 'üî¥  #{$keys} is not a valid color';
  }

  @return $val;
}
// Requires "map-functions"
/// Check whether `$value` is a valid length.
/// @group Internals
/// @param {*} $value - Value to validate.
/// @return {Bool}
/// @link http://www.sitepoint.com/bulletproof-function-validate-length-values-sass/
///
@function fs-is-length($value) {
  @return fs-contains(0 'auto' 'initial' 'inherit', $value) or type-of($value) == 'number' and not unitless($value) or str-slice($value + '', 1, 4) == 'calc';
}
// Requires "contains" function
/// Return unitless ratio of two values
/// @group Internals
/// @param {Number} $a - Dividend
/// @param {Number} $a - Divisor
/// @return {Number} - Unitless ratio
/// @require {function} fs-strip
///
@function fs-ratio($a, $b) {
  // Check if units match, or if divisor is unitless
  @if unit($a) == unit($b) or unitless($b) {
    @return fs-strip($a / $b);
  }
  // Warn if units don't match
  @else {
    @error 'üî¥  Units do not match: fs-ratio(#{$a}, #{$b})';
  }
}
// Requires "strip-unit" function
////
/// @ignore Symbol reference http://www.w3schools.com/tags/ref_urlencode.asp
/// @ignore Note: gulp-minify-css (which uses clean-css) isn‚Äôt applying config options correctly causing data URLs to not be wrapped in quote, so we have to convert double quotes (") to percent encoded symbols.
////

/// @access private
$common-symbol-map: (
  ' ': '%20',
  '\'': '%22',
  '"': '%27',
  '#': '%23',
  '/': '%2F',
  ':': '%3A',
  '(': '%28',
  ')': '%29',
  '%': '%25',
  '<': '%3C',
  '>': '%3E',
  '\\': '%5C',
  '^': '%5E',
  '`': '%60',
  '{': '%7B',
  '|': '%7C',
  '}': '%7D',
  '‚Äö': '%E2%80%9A',
  '‚Äû': '%E2%80%9E',
  '‚Ä¶': '%E2%80%A6',
  'ÀÜ': '%CB%86',
  '‚Äπ': '%E2%80%B9',
  '‚Äò': '%E2%80%98',
  '‚Äô': '%E2%80%99',
  '‚Äú': '%E2%80%9C',
  '‚Äù': '%E2%80%9D',
  '‚Ä¢': '%E2%80%A2',
  '‚Äì': '%E2%80%93',
  '‚Äî': '%E2%80%94',
  'Àú': '%CB%9C',
  '‚Ñ¢': '%E2%84',
  '‚Ä∫': '%E2%80',
  '¬°': '%C2%A1',
  '¬¢': '%C2%A2',
  '¬£': '%C2%A3',
  '¬•': '%C2%A5',
  '¬¶': '%C2%A6',
  '¬©': '%C2%A9',
  '¬´': '%C2%AB',
  '¬Æ': '%C2%AE',
  '¬¥': '%C2%B4',
  '¬ª': '%C2%BB',
);

/// @access private
$extended-symbol-map: (
  ' ': '%20',
  '\'': '%22',
  '"': '%27',
  '#': '%23',
  '/': '%2F',
  ':': '%3A',
  '(': '%28',
  ')': '%29',
  '%': '%25',
  '<': '%3C',
  '>': '%3E',
  '\\': '%5C',
  '^': '%5E',
  '`': '%60',
  '{': '%7B',
  '|': '%7C',
  '}': '%7D',
  '‚Äö': '%E2%80%9A',
  '∆í': '%C6%92',
  '‚Äû': '%E2%80%9E',
  '‚Ä¶': '%E2%80%A6',
  '‚Ä†': '%E2%80%A0',
  '‚Ä°': '%E2%80%A1',
  'ÀÜ': '%CB%86',
  '‚Ä∞': '%E2%80%B0',
  '≈†': '%C5%A0',
  '‚Äπ': '%E2%80%B9',
  '≈í': '%C5%92',
  '≈Ω': '%C5%BD',
  '‚Äò': '%E2%80%98',
  '‚Äô': '%E2%80%99',
  '‚Äú': '%E2%80%9C',
  '‚Äù': '%E2%80%9D',
  '‚Ä¢': '%E2%80%A2',
  '‚Äì': '%E2%80%93',
  '‚Äî': '%E2%80%94',
  'Àú': '%CB%9C',
  '‚Ñ¢': '%E2%84',
  '≈°': '%C5%A1',
  '‚Ä∫': '%E2%80',
  '≈ì': '%C5%93',
  '¬ù': '%9D',
  '≈æ': '%C5%BE',
  '≈∏': '%C5%B8',
  '¬°': '%C2%A1',
  '¬¢': '%C2%A2',
  '¬£': '%C2%A3',
  '¬§': '%C2%A4',
  '¬•': '%C2%A5',
  '¬¶': '%C2%A6',
  '¬ß': '%C2%A7',
  '¬®': '%C2%A8',
  '¬©': '%C2%A9',
  '¬™': '%C2%AA',
  '¬´': '%C2%AB',
  '¬¨': '%C2%AC',
  '¬Æ': '%C2%AE',
  '¬Ø': '%C2%AF',
  '¬∞': '%C2%B0',
  '¬±': '%C2%B1',
  '¬≤': '%C2%B2',
  '¬≥': '%C2%B3',
  '¬¥': '%C2%B4',
  '¬µ': '%C2%B5',
  '¬∂': '%C2%B6',
  '¬∑': '%C2%B7',
  '¬∏': '%C2%B8',
  '¬π': '%C2%B9',
  '¬∫': '%C2%BA',
  '¬ª': '%C2%BB',
  '¬º': '%C2%BC',
  '¬Ω': '%C2%BD',
  '¬æ': '%C2%BE',
  '¬ø': '%C2%BF',
  '√Ä': '%C3%80',
  '√Å': '%C3%81',
  '√Ç': '%C3%82',
  '√É': '%C3%83',
  '√Ñ': '%C3%84',
  '√Ö': '%C3%85',
  '√Ü': '%C3%86',
  '√á': '%C3%87',
  '√à': '%C3%88',
  '√â': '%C3%89',
  '√ä': '%C3%8A',
  '√ã': '%C3%8B',
  '√å': '%C3%8C',
  '√ç': '%C3%8D',
  '√é': '%C3%8E',
  '√è': '%C3%8F',
  '√ê': '%C3%90',
  '√ë': '%C3%91',
  '√í': '%C3%92',
  '√ì': '%C3%93',
  '√î': '%C3%94',
  '√ï': '%C3%95',
  '√ñ': '%C3%96',
  '√ó': '%C3%97',
  '√ò': '%C3%98',
  '√ô': '%C3%99',
  '√ö': '%C3%9A',
  '√õ': '%C3%9B',
  '√ú': '%C3%9C',
  '√ù': '%C3%9D',
  '√û': '%C3%9E',
  '√ü': '%C3%9F',
  '√†': '%C3%A0',
  '√°': '%C3%A1',
  '√¢': '%C3%A2',
  '√£': '%C3%A3',
  '√§': '%C3%A4',
  '√•': '%C3%A5',
  '√¶': '%C3%A6',
  '√ß': '%C3%A7',
  '√®': '%C3%A8',
  '√©': '%C3%A9',
  '√™': '%C3%AA',
  '√´': '%C3%AB',
  '√¨': '%C3%AC',
  '√≠': '%C3%AD',
  '√Æ': '%C3%AE',
  '√Ø': '%C3%AF',
  '√∞': '%C3%B0',
  '√±': '%C3%B1',
  '√≤': '%C3%B2',
  '√≥': '%C3%B3',
  '√¥': '%C3%B4',
  '√µ': '%C3%B5',
  '√∂': '%C3%B6',
  '√∑': '%C3%B7',
  '√∏': '%C3%B8',
  '√π': '%C3%B9',
  '√∫': '%C3%BA',
  '√ª': '%C3%BB',
  '√º': '%C3%BC',
  '√Ω': '%C3%BD',
  '√æ': '%C3%BE',
  '√ø': '%C3%BF'
);


/// URL-encode a string, useful for inlining SVGs in CSS
/// @group Internals
/// @param {String} $string - String to encode
/// @return {String} - Encoded string
/// @require {function} fs-str-replace
///
@function fs-url-encode($string) {
  $new-string: '';

  // Loop through each character in string
  @for $i from 1 through str-length($string) {
    $char: str-slice($string, $i, $i);

    // Check if character is in symbol map
    $char-lookup: map-get($common-symbol-map, $char);

    // If it is, append encoded character to new string
    @if $char-lookup != null {
      $new-string: $new-string + $char-lookup;
    }

    // Otherwise, append character to new string
    @else {
      $new-string: $new-string + $char;
    }
  }

  // Return converted string
  @return $new-string;
}
// Requires "str-replace"
/// Get z-index layer from `$fs-zindex` map variable
/// @param {Arglist} $keys - key/value
/// @return {Number} - z-index value
/// @require {function} fs-map-deep-get - Fetch nested keys
/// @require {variable} $fs-zindex - Global z-index map
/// @link https://twitter.com/HugoGiraudel/status/480022470431608832
/// @link http://www.sitepoint.com/better-solution-managing-z-index-sass/
///
@function fs-zindex($keys...) {
  @if not global-variable-exists(fs-zindex) {
    @error 'üî¥  $fs-zindex map does not exist';
  }

  @if not length($fs-zindex) {
    @error 'üî¥  $fs-zindex map does not contain any items';
  }

  @return fs-map-deep-get($fs-zindex, $keys...);
}
// Requires "map-functions"
/// Helper to get URL-escaped inline SVG code for use with `background-image`
/// @param {String} $name - Icon name
/// @return {Color} $color - Fill color
/// @require {function} fs-url-encode - Fetch nested keys
/// @require {variable} $fs-svg-icons - SVG icon map
///
/// @ignore - SVG code must be escaped for older browsers (e.g. IE9)
/// @ignore - Some versions of Firefox don't like the ‚Äú#‚Äù symbol, must be also be escaped
/// @ignore - IE9+ requires height/width attributes or else background-size won't work
///
/// @link https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
/// @link https://css-tricks.com/probably-dont-base64-svg/
/// @link http://stackoverflow.com/questions/21840551/background-size-with-svg-squished-in-ie9-10
/// @link http://caniuse.com/#feat=datauri
///
@function fs-svg($name, $color: false, $other: false) {
  // Check if icon exists
  @if not map-has-key($fs-svg-icons, $name) {
    @error 'üî¥  icon ‚Äú#{$name}‚Äù does not exists in $fs-svg-icons map';
    @return false;
  }

  // Get icon data
  $icon-map: map-get($fs-svg-icons, $name);
  $data: map-get($icon-map, 'data');
  $height: map-get($icon-map, 'height');
  $width: map-get($icon-map, 'width');
  $other: map-get($icon-map, 'other');

  // Fill
  $fill: '';
  @if ($color) {
    $fill: ' fill="#{$color}"';
  }

  // Other attributes
  $custom-attrs: '';
  @if ($other) {
    $custom-attrs: ' #{$other}';
  }

  // Return inline SVG data
  @return 'data:image/svg+xml,' + fs-url-encode('<svg version="1.1" baseProfile="full" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ' + $width + ' ' + $height + '" width="' + $width + '" height="' + $height + '" preserveAspectRatio="xMidYMid meet"' + $fill + $custom-attrs + '>' + unquote($data) + '</svg>');
}
// Requires "str-replace" and "url-encode" functions

//------------------------------------------------------------------------//
// Mixins
//------------------------------------------------------------------------//
/// Absolutely position an element and fill available space
@mixin fs-absolute-fill {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

/// Maintain aspect ratio
/// @param {Number} $ratio - Aspect ratio (width / height)
/// @example scss - 16:9 aspect ratio
///   .foo {
///     @include aspectRatio(16/9);
///   }
///
@mixin fs-aspect-ratio($ratio) {
  @if $ratio < 1 {
    @warn 'üî∂  Aspect ratio of #{$ratio} is for a portrait image. This may be a mistake.';
  }
  display: block;
  overflow: hidden;
  position: relative;

  &:before {
    content: '';
    display: block;
    padding-top: percentage(1 / $ratio);
  }
}

/// Burger menu icon mixin
/// @author Joren Van Hee
/// @param {Number} $width [30px] - Icon width
/// @param {Number} $height [5px] - Bar height
/// @param {Number} $gutter [3px] - Gap between bars
/// @param {Color} $color [currentColor] - Icon color
/// @param {Number} $border-radius [0] - Border radius
/// @param {Number} $transition-duration [300ms] - Transition duration
/// @link https://github.com/jorenvanhee/sass-burger
///
/// @example scss
///   .icon {
///     @include fs-burger(
///       $color: #fff,
///       $gutter: 3px,
///       $height: 3px,
///       $transition-duration: 200ms,
///       $width: 20px
///     );
///
///     &.is-active {
///       @include fs-burger-to-cross;
///     }
///   }
///
@mixin fs-burger(
  $width: 30px,
  $height: 5px,
  $gutter: 3px,
  $color: currentColor,
  $border-radius: 0,
  $transition-duration: 300ms
) {
  $burger-height: $height !global;
  $burger-gutter: $gutter !global;
  margin-bottom: $height + $gutter;
  margin-top: $height + $gutter;
  position: relative;
  user-select: none;

  // Burger parts
  // (---) top    -> &::before
  // [---] middle -> &
  // (---) bottom -> &::after
  &,
  &::before,
  &::after {
    background-color: $color;
    @if $border-radius != 0 {
      border-radius: $border-radius;
    }
    height: $height;
    transition-duration: $transition-duration;
    transition-property: background-color, transform;
    width: $width;
  }

  &::before,
  &::after {
    content: '';
    left: 0;
    position: absolute;
  }

  &::before {
    top: -($height + $gutter);
  }

  &::after {
    top: $height + $gutter;
  }
}

// Burger animations
@mixin fs-burger-to-cross($color: auto) {
  & {
    background-color: transparent;
  }

  @if ($color != auto) {
    &::before,
    &::after {
        background-color: $color;
    }
  }

  &:before {
    transform: translateY($burger-gutter + $burger-height) rotate(45deg);
  }

  &:after {
    transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
  }
}

/// Clears floats in IE 8+
/// @link http://nicolasgallagher.com/micro-clearfix-hack/
/// @link https://css-tricks.com/snippets/css/clear-fix/
///
@mixin fs-clearfix {
  &:after {
    clear: both;
    content: '';
    display: table;
  }
}

/// Debug helper to conditionally run code
/// @group Internals
/// @param {Boolean} $override - Manually override `$fs-debug-mode` value
/// @require {variable} $fs-debug-mode - Global debug mode flag
///
@mixin fs-debug($override: false) {
  @if ($fs-debug-mode or $override) {
    @content;
  }
}

/// Apply font smoothing in Safari, Chrome, and Firefox. Use sparringly!
/// @param {Boolean} $enabled - Enable or disable smoothing
/// @link http://maximilianhoffmann.com/posts/better-font-rendering-on-osx
/// @link http://usabilitypost.com/2012/11/05/stop-fixing-font-smoothing/
///
@mixin fs-font-smoothing($enabled: true) {
  @if $enabled {
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
  }
  @else {
    -moz-osx-font-smoothing: auto;
    -webkit-font-smoothing: subpixel-antialiased;
  }
}

/// Hide text in element, requires setting height and width
/// @link http://compass-style.org/reference/compass/typography/text/replacement/#mixin-hide-text
///
@mixin fs-hide-text {
  font-size: 0;
  overflow: hidden;
  text-indent: 110%;// > 100% prevents issues with inline-block elements
  white-space: nowrap;
}

/// Helper mixin to set link colors
/// @param {Color} $static - Static link color
/// @param {Color} $visited [$static] - Visited link color (optional)
/// @param {Color} $attention - Hover/focus/active link color
///
/// @example scss
///   a {
///     @include fs-link-colors(
///       $static: blue,
///       $visited: purple,
///       $attention: red
///     );
///   }
///
@mixin fs-link-colors($static, $attention, $visited: false) {
  @if $visited {
    &,
    &:link {
      color: $static;
    }

    &:visited {
      color: $visited;
    }
  }
  @else {
    &,
    &:link,
    &:visited {
      color: $static;
    }
  }

  &:hover,
  &:focus,
  &:active {
    color: $attention;
  }
}

/// Base media query mixin
/// @param {Number | Map} $conditions - Width or map of conditions
///
/// @example scss
///   @include fs-media((min-width: 600px, max-width: 900px, min-height: 500px, min-aspect-ratio: "1/1")) {‚Ä¶}
///
/// @ignore Convert units to ems when applicable http://zellwk.com/blog/media-query-units/
/// @ignore Note: EMs in media queries are relative to the initial browser font-size (16px) http://www.w3.org/TR/css3-mediaqueries/#units
/// @ignore Demo: http://www.sassmeister.com/gist/908ff8ee2e2e0b18f768fcbc87df385c
///
@mixin fs-media($conditions) {

  // Check if $conditions is a valid map
  @if type-of($conditions) != 'map' {
    @error 'üî¥ ‚Äú#{$conditions}‚Äù is not a valid Sass map';
  }
  @else {
    $mq-conditions: '';

    // Convert map to properly formatted media query string
    @each $type, $value in $conditions {

      // If value is a number, we may need to convert to ems
      @if type-of($value) == 'number' {

        // Convert px to em
        @if unit($value) == 'px' {
          $value: ($value / 16px) * 1em;
        }

        // Convert rem to em
        @else if unit($value) == 'rem' {
          $value: ($value / 1rem) * 1em;
        }
      }

      // Use str-insert() with -1 index to append value to the end
      $mq-conditions: str-insert($mq-conditions, 'and (#{$type}: #{$value}) ', -1);
    }

    // Output the media query
    @media screen #{$mq-conditions} {
      @content;
    }
  }
}

/// Min-width media query helper
/// @require {Mixin} fs-media
/// @param {Number} $width - Breakpoint width
///
/// @example scss
///   @include fs-min-width(960px) {‚Ä¶}
///
@mixin fs-min-width($width) {
  @include fs-media((min-width: $width)) {
    @content;
  }
}

/// Max-width media query helper
/// @require {Mixin} fs-media
/// @param {Number} $width - Breakpoint width
///
/// @example scss
///   @include fs-max-width(960px) {‚Ä¶}
///
@mixin fs-max-width($width) {
  @include fs-media((max-width: $width)) {
    @content;
  }
}

/// Hide in print view
@mixin fs-print-hide {
  // scss-lint:disable ImportantRule
  @media print {
    display: none !important;
  }
}

/// Only show in print view
@mixin fs-print-only {
  // scss-lint:disable ImportantRule
  display: none !important;

  @media print {
    display: block !important;
  }
}

////
/// Helper mixins to add various pseudo selectors
/// @group Selector Utils
/// @ignore http://sassmeister.com/gist/35c9c323d22eefdbf293 (by @csswizardry)
////

/// Helper mixin to apply static pesudo selectors
@mixin fs-static {
  &,
  &:link,
  &:visited {
    @content;
  }
}

/// Helper mixin to apply `:hover`, `:focus`, and `:active` pesudo selectors
@mixin fs-attention {
  &:hover,
  &:focus,
  &:active {
    @content;
  }
}

/// Helper mixin to apply all pesudo selectors
@mixin fs-all-states {
  &,
  &:link,
  &:visited,
  &:focus,
  &:hover,
  &:active {
    @content;
  }
}

/// Quantity query mixin
/// @author Indrek Paas
/// @link http://sassmeister.com/gist/f48e5e34d329eaf44e37
/// @link http://alistapart.com/article/quantity-queries-for-css
/// @require {function} fs-to-number
/// @param {String | Number} $arg - Quantity query
///
/// @example scss
///   @include fs-quantity(8) {
///     /* Exactly 8 */
///   }
///
///   @include fs-quantity(8 12) {
///     /* At least 8 and at most 12 */
///   }
///
///   @include fs-quantity(odd) {
///     /* Odd quantity */
///   }
///
///   @include fs-quantity(even) {
///     /* Even quantity*/
///   }
///
///   @include fs-quantity('<8') {
///     /* Less than 8 */
///   }
///
///   @include fs-quantity('<=8') {
///     /* Less than or equal to 8 */
///   }
///
///   @include fs-quantity('>8') {
///     /* More than 8 */
///   }
///
///   @include fs-quantity('>=8') {
///     /* More than or equal to 8 */
///   }
@mixin fs-quantity($arg) {
  // Exactly N
  @if type-of($arg) == 'number' {
    &:nth-last-child(#{$arg}):first-child,
    &:nth-last-child(#{$arg}):first-child ~ & {
      @content;
    }
  }

  // At least N and at most N
  @else if type-of($arg) == 'list' {
    &:nth-last-child(n+#{nth($arg, 1)}):nth-last-child(-n+#{nth($arg, 2)}):first-child,
    &:nth-last-child(n+#{nth($arg, 1)}):nth-last-child(-n+#{nth($arg, 2)}):first-child ~ & {
      @content;
    }
  }

  @else if type-of($arg) == 'string' {
    // Odd/even
    @if $arg == 'odd' or $arg == 'even' {
      &:nth-last-child(#{$arg}):first-child,
      &:nth-last-child(#{$arg}):first-child ~ & {
        @content;
      }
    }

    // Less than...
    @else if str-slice($arg, 1, 1) == '<' {
      // Less than or equal to N
      @if str-slice($arg, 2, 2) == '=' {
        $arg: str-slice($arg, 3);

        &:nth-last-child(-n+#{$arg}):first-child,
        &:nth-last-child(-n+#{$arg}):first-child ~ & {
          @content;
        }
      }

      // Less than N
      @else {
        $arg: fs-to-number(str-slice($arg, 2));

        &:nth-last-child(-n+#{$arg - 1}):first-child,
        &:nth-last-child(-n+#{$arg - 1}):first-child ~ & {
          @content;
        }
      }
    }

    // More than...
    @else if str-slice($arg, 1, 1) == '>' {
      // More than or equal to N
      @if str-slice($arg, 2, 2) == '=' {
        $arg: str-slice($arg, 3);

        &:nth-last-child(n+#{$arg}),
        &:nth-last-child(n+#{$arg}) ~ & {
          @content;
        }
      }

      // More than N
      @else {
        $arg: fs-to-number(str-slice($arg, 2));

        &:nth-last-child(n+#{$arg + 1}),
        &:nth-last-child(n+#{$arg + 1}) ~ & {
          @content;
        }
      }
    }
  }
}

////
/// Reset default element styles
/// @group Resets
////

/// Reset input styles
@mixin fs-reset-input {
  background-color: transparent;
  border: 0;
  margin: 0;
  padding: 0;
}

/// Reset button styles
@mixin fs-reset-button {
  @include fs-reset-input;
  background-image: none;// for Firefox mobile
  cursor: pointer;
  font-weight: normal;
  letter-spacing: 0;
  line-height: normal;
  text-align: left;
  text-shadow: none;
  text-transform: none;

  &:hover,
  &:focus,
  &:active {
    background-color: transparent;
  }
}


/// Reset textarea styles
@mixin fs-reset-textarea {
  border: 0;
  outline: 0;
  overflow: auto;
  resize: none;
  vertical-align: top;
}


/// Reset list styles
@mixin fs-reset-list {
  list-style-type: none;
  margin-bottom: 0;
  margin-top: 0;
  padding-left: 0;
}

////
/// @group Selector Utils
/// @link http://www.sitepoint.com/sass-3-4-is-out/
////

/// Add selector to root (requires Libsass 3.3+ or Ruby Sass 3.4+)
/// @param {String} $selector - Selector to add to root
///
@mixin fs-root-add($selector) {
  @at-root #{$selector + &} {
    @content;
  }
}

/// Prepend selector
/// @param {String} $selector - Selector to insert before root
///
@mixin fs-root-before($selector) {
  @at-root $selector #{&} {
    @content;
  }
}

/// Helper to select all text input types
/// @group Selector Utils
@mixin fs-text-inputs {
  // scss-lint:disable QualifyingElement
  input[type='email'],
  input[type='number'],
  input[type='password'],
  input[type='search'],
  input[type='tel'],
  input[type='text'],
  input[type='url'] {
    @content;
  }
}

/// Helper for setting `text-rendering: optimizeLegibility;`
/// @ignore Note: optimizeLegibility is buggy on Safari 5.1 for Windows
///
@mixin fs-text-optimize {
  text-rendering: optimizeLegibility;// Improve kerning and enable ligatures

  .webos & {
    text-rendering: auto;// Disable kerning for webOS http://bit.ly/1brNQpJ
  }
}

/// Triangle mixin (from Bourbon)
/// @author https://github.com/thoughtbot
/// @param {Number} $size - Height of triangle
/// @param {Color} $color - Hex color value
/// @param {String} $direction - Up, down, left, or right
/// @link https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_triangle.scss
///
@mixin fs-triangle($size, $color, $direction) {
  height: 0;
  width: 0;

  $width: nth($size, 1);
  $height: nth($size, length($size));

  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {

    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height / 2);

    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top-width: 0;

    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-right-width: 0;
      border-top: $width solid $background-color;

    } @else if $direction == down {
      border-bottom-width: 0;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;

    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-left-width: 0;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  }

  @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left: $width solid $background-color;

    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  }

  @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left: $width solid $background-color;

    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  }

  @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  }

  @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  }

  @else if ($direction == inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;
  }

  @else if ($direction == inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}

/// Vertically center an element
/// @param {String} $position [relative] - Positioning
/// @link http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/
/// @ignore Note: May need to set `transform-style: preserve-3d;` on parent to prevent blurry text
///
@mixin fs-vert-center($position: relative) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);

  .no-csstransforms & {
    position: static;
    top: auto;
  }
}

/// Reset vertical center styles
///
@mixin fs-undo-vert-center {
  top: auto;
  transform: translateY(0);
}

/// Hide visually but still be available to screenreaders
/// @link http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
/// @author Jonathan Snook
///
@mixin fs-visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

/// Undo visually hidden styles
///
@mixin fs-undo-visually-hidden {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto;
}

/// Break long words, hyphenate if possible (requires `lang` attribute)
/// @link http://kenneth.io/blog/2012/03/04/word-wrapping-hypernation-using-css/
/// @link https://justmarkup.com/log/2015/07/dealing-with-long-words-in-css/
/// @link http://caniuse.com/#feat=css-hyphens
/// @link http://caniuse.com/#feat=wordwrap
///
/// @ignore Demo http://jsbin.com/fubor
/// @ignore - Hyphenation not currently suported in Chrome, Opera, Android, or IE9-
/// @ignore - Hyphenation depends on dictionary, so requires lang attribute be set
/// @ignore - Setting "word-break: break-all" will disable hyphens in Firefox and IE10+
///
@mixin fs-break-word {
  hyphens: auto;// requires lang attribute be set on target element or ancestor
  overflow-wrap: break-word;
  word-wrap: break-word;
}


// Minxins with dependencies
/// Automatically scale font-size and line-height
/// @require {mixin} fs-min-width - Min-width media query mixin
/// @param {Number | List} $start - Starting `font-size` and `line-height` (optional)
/// @param {Number | List} $end - Ending `font-size` and `line-height` (optional)
/// @param {Number} $font-increment [2px] - Font-size increment
/// @param {Number} $line-height-increment [0.1] - Line-height increment (optional)
/// @param {Number} $start-width [320px] - Starting viewport width
/// @param {Number} $end-width [1000px] - Ending viewport width
/// @param {Number} $context [$fs-base-font-size] - Base `font-size` (optional)
/// @param {String} $units ['%'] - `font-size` units (optional, defaults to `'%'`)
/// @require {function} _convert-units
/// @link https://github.com/bookcasey/fittext
///
/// @example scss
///   // Basic example
///   @include fs-scale-text(
///     $start: 32px,
///     $end: 50px,
///     $font-increment: 3px,
///     $start-width: 400px,
///     $end-width: 800px
///   );
///
///   // With line-height and custom units
///   @include fs-scale-text(
///     $start: 32px 1.25,
///     $end: 50px 1.1,
///     $font-increment: 3px,
///     $line-height-increment: 0.05,
///     $start-width: 400px,
///     $end-width: 800px,
///     $units: 'em'
///   );

@mixin fs-scale-text(
  $start,
  $end,
  $font-increment: 2px,
  $line-height-increment: 0.1,
  $start-width: 320px,
  $end-width: 1000px,
  $context: $fs-base-font-size,
  $units: '%'
) {

  // Add vars at top to avoid scope issues
  $start-font-size: $start;
  $end-font-size: $end;
  $has-line-height: false;
  $start-line-height: inherit;
  $end-line-height: inherit;
  $line-height-diff: $line-height-increment;
  $line-height-sign: 1;

  // Check for line-height
  @if length($start) == 2 and length($end) == 2 {
    $has-line-height: true;
  }

  // Update vars if line-height was specified
  @if $has-line-height {
    // Save font-sizes
    $start-font-size: nth($start, 1);
    $end-font-size: nth($end, 1);

    // Save line-height values
    $start-line-height: nth($start, 2);
    $end-line-height: nth($end, 2);
    $line-height-diff: $end-line-height - $start-line-height;
    $line-height-sign: $line-height-diff / abs($line-height-diff);// returns 1 or -1
  }

  // Validation
  //---------------------------------
  @if $end-font-size <= $start-font-size {
    @error 'üî¥  max font size must be greater than min font size for #{&}';
  }

  @if (unit($start-font-size) != 'px' or unit($end-font-size) != 'px') {
    @error 'üî¥  starting and ending font sizes must be in pixels for #{&}';
  }

  @if unit($font-increment) != 'px' {
    @error 'üî¥  font increment must be in pixels for #{&}';
  }

  @if unit($context) != 'px' {
    @error 'üî¥  font context size must be in pixels for #{&}';
  }

  @if type-of($start-width) == 'number' and type-of($end-width) == 'number' {
    @if $end-width <= $start-width {
      @error 'üî¥  ending width must be greater than starting width for #{&}';
    }
  }
  @else {
    @if type-of($start-width) != 'number' {
      @error 'üî¥  starting width must be a pixel value for #{&}';
    }

    @if type-of($end-width) != 'number' {
      @error 'üî¥  ending width must be a pixel value for #{&}';
    }
  }

  @if ($units != '%' and $units != 'em' and $units != 'rem' and $units != 'px') {
    @error 'üî¥  fs-scale-text() output units must be %, px, em, or rem  for #{&}';
  }

  // Output starting font-size for when fs-scale-text() used multiple times on the same element
  @include fs-min-width($start-width) {
    font-size: _convert-units($units, $start-font-size, $context);
    @if $has-line-height {
      line-height: $start-line-height;
    }
  }

  // Calculate how many times the font-size will need to be adjusted, rounded up to nearest whole number
  $font-size-steps: ceil(($end-font-size - $start-font-size) / $font-increment);

  // Warn if >10 breakpoints will be generated
  @if $fs-debug-mode and ($font-size-steps > 10) {
    @warn '‚ö†Ô∏è  #{$font-size-steps} breakpoints generated by fs-scale-text() for #{&}';
  }

  // Calculate the media query interval
  $font-size-mq-step: ($end-width - $start-width) / $font-size-steps;

  // Determine how many font steps equals one line-height step (e.g. increase line-height every nth font steps)
  $line-height-steps: abs($font-size-steps / ($line-height-diff / $line-height-increment));

  // If there are more line-height steps than font steps, adjust line-height increment so they are equal
  @if $line-height-steps < 1 {
    $line-height-increment: $line-height-increment / $line-height-steps;
    $line-height-steps: 1;
  }

  // Define vars here for scope reasons
  $line-height-index: 1;
  $line-height: $start-line-height;

  // @debug 'üî∑ ' + $font-size-steps + ' font steps, ' + ($font-size-steps / $line-height-steps) + ' line-height step(s)';

  // Generate the media queries
  @for $i from 1 through $font-size-steps {
    // Calculate current breakpoint width
    $breakpoint: round($start-width + ($i * $font-size-mq-step));

    // Calculate current font-size
    $font-size: $start-font-size + ($i * $font-increment);

    // Don‚Äôt exceed $end-width (could happen due to rounding)
    @if $breakpoint > $end-width {
      // @debug 'üî¥ $breakpoint: ' + $breakpoint + ' exceeds $end-width: ' + $end-width;
      $breakpoint: $end-width;
    }

    // Since we rounded up $font-size-steps, the last font step may need to be reduced to prevent exceeding the target font size
    @if $font-size > $end-font-size {
      // @debug 'üî¥ Reduce last $font-increment from ' + $font-increment + ' to ' + ($font-increment - ($font-size - $end-font-size));
      $font-size: $end-font-size;
    }

    // Output font size styles
    @include fs-min-width($breakpoint) {
      // _convert-units() will output the correct unit based on $units
      font-size: _convert-units($units, $font-size, $context);

      @if ($has-line-height and $line-height-diff != 0) {

        // Check if current font step is equal to a line-height step (e.g. increase line-height every nth font steps)
        // NOTE: For some reason, putting $i first (e.g. ‚Äú>=‚Äù) results in false positives when the values are equal ¬Ø\_(„ÉÑ)_/¬Ø
        @if ($line-height-steps * $line-height-index) <= $i {

          // Calculate the line height ($line-height-sign used to increase/decrease the starting value)
          $line-height: $start-line-height + ($line-height-sign * $line-height-index * $line-height-increment);
          line-height: $line-height;

          // Increment line-height counter
          $line-height-index: $line-height-index + 1;

          // Output whenever the line-height is updated
          // @debug 'üî∂ Step ' + $i + ': font-size ' + $font-size + ', line-height ' +  $line-height + ', index=' + $line-height-index;
        }
        // If the last iteration, just output the $end-line-height instead of calculating it since it might exceed the final value due to rounding above
        @else if ($i == $font-size-steps) {
          // @debug '‚ö™Ô∏è line-height set to ending value of ' + $end-line-height + ' instead of calculated value of ' + ($start-line-height + ($line-height-sign * $line-height-index * $line-height-increment));
          line-height: $end-line-height;
        }
        @else {
          // Output when the font-size is updated but not the line-height
          // @debug 'üî∑ Step ' + $i + ': font-size ' + $font-size + ', line-height ' +  $line-height + ', index=' + $line-height-index;
        }
      }
    }
  }
};
// Requires _media-query.scss and _convert-units.scss
